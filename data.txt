x─────────────────────────────────────────────────────────────────────────────
// 1) Projet
// ─────────────────────────────────────────────────────────────────────────────
MERGE (proj:Project {slug: 'proj-001'})
  ON CREATE SET proj.name = 'proj-001', proj.created = datetime() 

// ─────────────────────────────────────────────────────────────────────────────
// 2) Arborescence Fichiers
// ─────────────────────────────────────────────────────────────────────────────
MERGE (srcFolder:Folder {path: '/src'})
  ON CREATE SET srcFolder.name = 'src' 
MERGE (testsFolder:Folder {path: '/tests'})
  ON CREATE SET testsFolder.name = 'tests' 
MERGE (docsFolder:Folder {path: '/docs'})
  ON CREATE SET docsFolder.name = 'docs' 
MERGE (utilsFolder:Folder {path: '/src/utils'})
  ON CREATE SET utilsFolder.name = 'utils' 

MERGE (proj)-[:INCLUDES]->(srcFolder) 
MERGE (proj)-[:INCLUDES]->(testsFolder) 
MERGE (proj)-[:INCLUDES]->(docsFolder) 

MERGE (srcFolder)-[:CONTAINS]->(docsFolder) 
MERGE (srcFolder)-[:CONTAINS]->(utilsFolder) 

// ─────────────────────────────────────────────────────────────────────────────
// 3) Fichiers
// ─────────────────────────────────────────────────────────────────────────────
MERGE (mainFile:File {path: '/src/Main.java'})
  ON CREATE SET mainFile.name = 'Main.java' 
MERGE (utilFile:File {path: '/src/utils/Utils.java'})
  ON CREATE SET utilFile.name = 'Utils.java' 
MERGE (testFile:File {path: '/tests/MainTest.java'})
  ON CREATE SET testFile.name = 'MainTest.java' 

MERGE (srcFolder)-[:CONTAINS]->(mainFile) 
MERGE (utilsFolder)-[:CONTAINS]->(utilFile) 
MERGE (testsFolder)-[:CONTAINS]->(testFile) 

MERGE (mainFile)-[:REQUIRES]->(utilFile) 
MERGE (testFile)-[:REQUIRES]->(mainFile) 

// ─────────────────────────────────────────────────────────────────────────────
// 4) Types et Déclarations
// ─────────────────────────────────────────────────────────────────────────────
MERGE (typeMain:Type {fqn: 'com.example.Main'})
  ON CREATE SET typeMain.name = 'com.example.Main' 
MERGE (typeUtil:Type {fqn: 'com.example.utils.Utils'})
  ON CREATE SET typeUtil.name = 'com.example.utils.Utils' 
MERGE (typeTest:Type {fqn: 'com.example.MainTest'})
  ON CREATE SET typeTest.name = 'com.example.MainTest' 

MERGE (mainFile)-[:DECLARES]->(typeMain) 
MERGE (utilFile)-[:DECLARES]->(typeUtil) 
MERGE (testFile)-[:DECLARES]->(typeTest) 

// ─────────────────────────────────────────────────────────────────────────────
// 5) Partie Logique (Scope, Opérations, Variables)
// ─────────────────────────────────────────────────────────────────────────────
// Scopes
MERGE (appScope:Scope {name: 'com.example'})
  ON CREATE SET appScope.name = 'com.example' 
MERGE (testScope:Scope {name: 'com.example.tests'})
  ON CREATE SET testScope.name = 'com.example.tests' 

MERGE (appScope)-[:ENCLOSES]->(typeMain) 
MERGE (appScope)-[:ENCLOSES]->(typeUtil) 
MERGE (testScope)-[:ENCLOSES]->(typeTest) 

// Héritage de type
MERGE (typeTest)-[:SPECIALIZES]->(typeMain) 

// Opérations
MERGE (opMain:Operation {signature: 'void Main.main(String[])'})
  ON CREATE SET opMain.name = 'Main.main' 
MERGE (opHelper:Operation {signature: 'String Utils.helper()'})
  ON CREATE SET opHelper.name = 'Utils.helper' 
MERGE (opTest:Operation {signature: 'void MainTest.testMain()'})
  ON CREATE SET opTest.name = 'MainTest.testMain' 

// Types auxiliaires pour retours/instanciations
MERGE (voidType:Type {fqn: 'void'})
  ON CREATE SET voidType.name = 'void' 
MERGE (stringArrayType:Type {fqn: 'java.lang.String[]'})
  ON CREATE SET stringArrayType.name = 'java.lang.String[]' 

MERGE (opMain)-[:RETURNS]->(voidType) 
MERGE (opHelper)-[:RETURNS]->(typeUtil) 
MERGE (opTest)-[:RETURNS]->(voidType) 

MERGE (typeMain)-[:ENCAPSULATES]->(opMain) 
MERGE (typeUtil)-[:ENCAPSULATES]->(opHelper) 
MERGE (typeTest)-[:ENCAPSULATES]->(opTest) 

MERGE (opMain)-[:INVOKES]->(opHelper) 
MERGE (opTest)-[:INVOKES]->(opMain) 
MERGE (opMain)-[:INSTANTIATES]->(stringArrayType) 

// Variables
MERGE (varArgs:Variable {name: 'args'})
  ON CREATE SET varArgs.name = 'args' 
MERGE (varCount:Variable {name: 'count'})
  ON CREATE SET varCount.name = 'count' 

MERGE (varArgs)-[:TYPED]->(stringArrayType) 
MERGE (varCount)-[:TYPED]->(voidType) 
MERGE (varArgs)-[:PARAMETERIZES]->(opMain) 
MERGE (varCount)-[:PARAMETERIZES]->(opHelper) 
MERGE (opMain)-[:USES]->(varArgs) 

// ─────────────────────────────────────────────────────────────────────────────
// 6) Analyse (Dimension, Catégorie, Metric, Implements)
// ─────────────────────────────────────────────────────────────────────────────
MERGE (dimPerf:Dimension {name: 'Performance'}) 
MERGE (dimMaint:Dimension {name: 'Maintainability'}) 

MERGE (catComplex:Category {name: 'Complexity'}) 
MERGE (catCohesion:Category {name: 'Cohesion'}) 

MERGE (catComplex)-[:COMPOSES]->(dimMaint) 
MERGE (catCohesion)-[:COMPOSES]->(dimMaint) 
MERGE (catCohesion)-[:REFINES]->(catComplex) 
MERGE (catComplex)-[:SUCCEEDS]->(catCohesion) 

MERGE (metCyc:Metric {name: 'Cyclomatic'}) 
MERGE (metLines:Metric {name: 'LinesOfCode'}) 

MERGE (metCyc)-[:MEASURES]->(catComplex) 
MERGE (metLines)-[:MEASURES]->(catComplex) 

// Liaison Category → Type via :IMPLEMENTS
MERGE (catComplex)-[:IMPLEMENTS]->(typeMain) 
MERGE (catCohesion)-[:IMPLEMENTS]->(typeUtil);










{
  "nodes": [
    { "id": 1,  "nodeType": "Project",   "name": "proj-001",               "description": "", "rawProperties": "" },
    { "id": 2,  "nodeType": "Folder",    "name": "/src",                   "description": "", "rawProperties": "" },
    { "id": 3,  "nodeType": "Folder",    "name": "/tests",                 "description": "", "rawProperties": "" },
    { "id": 4,  "nodeType": "Folder",    "name": "/docs",                  "description": "", "rawProperties": "" },
    { "id": 5,  "nodeType": "Folder",    "name": "/src/utils",             "description": "", "rawProperties": "" },

    { "id": 6,  "nodeType": "File",      "name": "/src/Main.java",         "description": "", "rawProperties": "" },
    { "id": 7,  "nodeType": "File",      "name": "/src/utils/Utils.java",  "description": "", "rawProperties": "" },
    { "id": 8,  "nodeType": "File",      "name": "/tests/MainTest.java",   "description": "", "rawProperties": "" },

    { "id": 9,  "nodeType": "Type",      "name": "com.example.Main",       "description": "", "rawProperties": "" },
    { "id": 10, "nodeType": "Type",      "name": "com.example.utils.Utils","description": "", "rawProperties": "" },
    { "id": 11, "nodeType": "Type",      "name": "com.example.MainTest",   "description": "", "rawProperties": "" },
    { "id": 12, "nodeType": "Type",      "name": "void",                   "description": "", "rawProperties": "" },
    { "id": 13, "nodeType": "Type",      "name": "java.lang.String[]",     "description": "", "rawProperties": "" },

    { "id": 14, "nodeType": "Scope",     "name": "com.example",            "description": "", "rawProperties": "" },
    { "id": 15, "nodeType": "Scope",     "name": "com.example.tests",      "description": "", "rawProperties": "" },

    { "id": 16, "nodeType": "Operation", "name": "void Main.main(String[])",   "description": "", "rawProperties": "" },
    { "id": 17, "nodeType": "Operation", "name": "String Utils.helper()",      "description": "", "rawProperties": "" },
    { "id": 18, "nodeType": "Operation", "name": "void MainTest.testMain()",   "description": "", "rawProperties": "" },

    { "id": 19, "nodeType": "Variable",  "name": "args",                   "description": "", "rawProperties": "" },
    { "id": 20, "nodeType": "Variable",  "name": "count",                  "description": "", "rawProperties": "" },

    { "id": 21, "nodeType": "Dimension", "name": "Performance",            "description": "", "rawProperties": "" },
    { "id": 22, "nodeType": "Dimension", "name": "Maintainability",        "description": "", "rawProperties": "" },

    { "id": 23, "nodeType": "Category",  "name": "Complexity",             "description": "", "rawProperties": "" },
    { "id": 24, "nodeType": "Category",  "name": "Cohesion",               "description": "", "rawProperties": "" },

    { "id": 25, "nodeType": "Metric",    "name": "Cyclomatic",             "description": "", "rawProperties": "" },
    { "id": 26, "nodeType": "Metric",    "name": "LinesOfCode",            "description": "", "rawProperties": "" }
  ],
  "links": [
    { "source": 1,  "target": 2,  "relation": "INCLUDES" },
    { "source": 1,  "target": 3,  "relation": "INCLUDES" },
    { "source": 1,  "target": 4,  "relation": "INCLUDES" },

    { "source": 2,  "target": 4,  "relation": "CONTAINS" },
    { "source": 2,  "target": 5,  "relation": "CONTAINS" },

    { "source": 2,  "target": 6,  "relation": "CONTAINS" },
    { "source": 5,  "target": 7,  "relation": "CONTAINS" },
    { "source": 3,  "target": 8,  "relation": "CONTAINS" },

    { "source": 6,  "target": 7,  "relation": "REQUIRES" },
    { "source": 8,  "target": 6,  "relation": "REQUIRES" },

    { "source": 6,  "target": 9,  "relation": "DECLARES" },
    { "source": 7,  "target": 10, "relation": "DECLARES" },
    { "source": 8,  "target": 11, "relation": "DECLARES" },

    { "source": 14, "target": 9,  "relation": "ENCLOSES" },
    { "source": 14, "target": 10, "relation": "ENCLOSES" },
    { "source": 15, "target": 11, "relation": "ENCLOSES" },

    { "source": 11, "target": 9,  "relation": "SPECIALIZES" },

    { "source": 9,  "target": 16, "relation": "ENCAPSULATES" },
    { "source": 10, "target": 17, "relation": "ENCAPSULATES" },
    { "source": 11, "target": 18, "relation": "ENCAPSULATES" },

    { "source": 16, "target": 12, "relation": "RETURNS" },
    { "source": 17, "target": 10, "relation": "RETURNS" },
    { "source": 18, "target": 12, "relation": "RETURNS" },
    { "source": 16, "target": 13, "relation": "INSTANTIATES" },

    { "source": 16, "target": 17, "relation": "INVOKES" },
    { "source": 18, "target": 16, "relation": "INVOKES" },

    { "source": 19, "target": 13, "relation": "TYPED" },
    { "source": 20, "target": 12, "relation": "TYPED" },
    { "source": 19, "target": 16, "relation": "PARAMETERIZES" },
    { "source": 20, "target": 17, "relation": "PARAMETERIZES" },
    { "source": 16, "target": 19, "relation": "USES" },

    { "source": 23, "target": 22, "relation": "COMPOSES" },
    { "source": 24, "target": 22, "relation": "COMPOSES" },

    { "source": 24, "target": 23, "relation": "REFINES" },
    { "source": 23, "target": 24, "relation": "SUCCEEDS" },

    { "source": 25, "target": 23, "relation": "MEASURES" },
    { "source": 26, "target": 23, "relation": "MEASURES" },

    { "source": 23, "target": 9,  "relation": "IMPLEMENTS" },
    { "source": 24, "target": 10, "relation": "IMPLEMENTS" }
  ]
}


{
  "nodes": [
    { "id": 1, "nodeType": "Scope",     "name": "com.demo",          "description": "", "rawProperties": "" },

    { "id": 2, "nodeType": "Type",      "name": "com.demo.Foo",      "description": "", "rawProperties": "" },
    { "id": 3, "nodeType": "Type",      "name": "com.demo.Bar",      "description": "", "rawProperties": "" },

    { "id": 4, "nodeType": "Operation", "name": "void Foo.doFoo()",  "description": "", "rawProperties": "" },
    { "id": 5, "nodeType": "Operation", "name": "void Bar.doBar()",  "description": "", "rawProperties": "" }
  ],

  "links": [
   
    { "source": 1, "target": 2, "relation": "ENCLOSES" },
    { "source": 1, "target": 3, "relation": "ENCLOSES" },

    { "source": 2, "target": 4, "relation": "ENCAPSULATES" },
    { "source": 3, "target": 5, "relation": "ENCAPSULATES" },

    { "source": 4, "target": 5, "relation": "INVOKES" }
  ]
}


{
  "nodes": [
    { "id": 1, "nodeType": "Scope",     "name": "com.demo",          "description": "","rawProperties": ""  },
    { "id": 2, "nodeType": "Scope",     "name": "com.demo.internal", "description": "","rawProperties": "" },

    { "id": 3, "nodeType": "Type",      "name": "com.demo.Foo",      "description": "" ,"rawProperties": ""},
    { "id": 4, "nodeType": "Type",      "name": "com.demo.internal.Bar", "description": "","rawProperties": "" },

    { "id": 5, "nodeType": "Operation", "name": "void Foo.doFoo()",  "description": "","rawProperties": "" },
    { "id": 6, "nodeType": "Operation", "name": "void Bar.doBar()",  "description": "","rawProperties": "" }
  ],
  "links": [
    { "source": 1, "target": 3, "relation": "ENCLOSES" },
    { "source": 2, "target": 4, "relation": "ENCLOSES" },

    { "source": 3, "target": 5, "relation": "ENCAPSULATES" },
    { "source": 4, "target": 6, "relation": "ENCAPSULATES" },

    { "source": 5, "target": 6, "relation": "INVOKES" }
  ]
}